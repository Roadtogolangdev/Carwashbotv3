package bot

import (
	"carwash-bot/internal/models"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"sort"
	"strings"
	"time"
)

func (b *CarWashBot) handleMessage(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	userID := msg.From.ID
	text := msg.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ)
	if state, exists := b.userStates[userID]; exists {
		if state.AwaitingCarInfo {
			b.handleCarInfoInput(chatID, userID, text)
			return
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch {
	case text == "/start" || text == "/menu" || text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		b.sendWelcomeMessage(chatID)

	case text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" || text == "/book":
		b.showDaySelection(chatID)

	case text == "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" || text == "/schedule":
		b.showSchedule(chatID)

	case text == "‚ùå –ú–æ–∏ –∑–∞–ø–∏—Å–∏" || text == "/mybookings":
		b.showUserBookings(msg.Chat.ID, msg.From.ID)

	case text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" || text == "/cancel":
		b.handleCancelCommand(chatID, userID)

	default:
		b.sendMessage(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
	}
}

func (b *CarWashBot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	data := query.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è")
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := b.botAPI.Request(callback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}

	switch {
	case strings.HasPrefix(data, "day_"):
		dateStr := strings.TrimPrefix(data, "day_")
		b.handleDaySelection(chatID, userID, dateStr)

	case strings.HasPrefix(data, "time_"):
		timeStr := strings.TrimPrefix(data, "time_")
		b.handleTimeSelection(chatID, userID, timeStr)

	case data == "main_menu":
		b.sendWelcomeMessage(chatID)

	case strings.HasPrefix(data, "cancel_"):
		bookingID := strings.TrimPrefix(data, "cancel_")
		b.handleBookingCancellation(chatID, userID, bookingID)

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", data)
	}
}
func (b *CarWashBot) sendWelcomeMessage(chatID int64) {
	msgText := `üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–æ–π–∫–∏!* üßº
    
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
		),
	)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleTimeSelection(chatID, userID int64, timeStr string) {
	state := b.userStates[userID]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
	if !b.schedule.IsTimeAvailable(state.SelectedDate, timeStr) {
		b.sendMessage(chatID, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
		b.showTimeSlots(chatID, state.SelectedDate)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ
	b.userStates[userID] = models.UserState{
		AwaitingCarInfo: true,
		SelectedDate:    state.SelectedDate,
		SelectedTime:    timeStr,
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –õ–∞–¥–∞ 123")
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleCarInfoInput(chatID, userID int64, text string) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteLastMessage(chatID)

	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
	parts := strings.SplitN(text, " ", 2)
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(chatID, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏ –º–∞—Ä–∫—É, –∏ –Ω–æ–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: –ì–∞–∑–µ–ª—å 123")
		b.sendMessageWithSave(chatID, msg)
		return
	}

	carModel := parts[0]
	carNumber := parts[1]
	state := b.userStates[userID]

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	if !b.schedule.BookDateTime(state.SelectedDate, state.SelectedTime, carModel, carNumber, userID) {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
				tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
			),
		)
		b.sendMessageWithSave(chatID, msg)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(b.userStates, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	confirmMsg := fmt.Sprintf(`‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!
üìÖ %s –≤ %s
üöó %s %s`,
		state.SelectedDate, state.SelectedTime, carModel, carNumber)

	msg := tgbotapi.NewMessage(chatID, confirmMsg)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	b.sendMessageWithSave(chatID, msg)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
	b.notifyAdminAboutNewBooking(state.SelectedTime, carModel, carNumber)
}

func (b *CarWashBot) showSchedule(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
	bookingsByDate := b.schedule.GetBookingsGroupedByDate()

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
	var dates []time.Time
	for dateStr := range bookingsByDate {
		date, _ := time.Parse("02.01.2006", dateStr)
		dates = append(dates, date)
	}
	sort.Slice(dates, func(i, j int) bool {
		return dates[i].Before(dates[j])
	})

	var sb strings.Builder
	sb.WriteString("üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n")

	now := time.Now()
	today := now.Format("02.01.2006")
	tomorrow := now.AddDate(0, 0, 1).Format("02.01.2006")

	for _, date := range dates {
		dateStr := date.Format("02.01.2006")

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		switch dateStr {
		case today:
			sb.WriteString("=== –°–µ–≥–æ–¥–Ω—è ===\n")
		case tomorrow:
			sb.WriteString("=== –ó–∞–≤—Ç—Ä–∞ ===\n")
		default:
			sb.WriteString(fmt.Sprintf("=== %s ===\n", date.Format("Monday, 02.01")))
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
		bookings := bookingsByDate[dateStr]
		sort.Slice(bookings, func(i, j int) bool {
			return bookings[i].Time < bookings[j].Time
		})

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
		for _, booking := range bookings {
			sb.WriteString(fmt.Sprintf("üïí %s - %s %s\n",
				booking.Time,
				booking.CarModel,
				booking.CarNumber))
		}
		sb.WriteString("\n")
	}

	if len(dates) == 0 {
		sb.WriteString("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π\n")
	}

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) notifyAdminAboutNewBooking(timeStr, carModel, carNumber string) {
	msgText := fmt.Sprintf(`üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:
–í—Ä–µ–º—è: %s
–ê–≤—Ç–æ: %s %s`, timeStr, carModel, carNumber)

	msg := tgbotapi.NewMessage(b.adminID, msgText)
	b.botAPI.Send(msg)
}

func (b *CarWashBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.botAPI.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *CarWashBot) sendMessageWithSave(chatID int64, msg tgbotapi.MessageConfig) {
	sentMsg, err := b.botAPI.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	b.msgIDLock.Lock()
	b.lastMessageID[chatID] = sentMsg.MessageID
	b.msgIDLock.Unlock()
}

func (b *CarWashBot) deleteLastMessage(chatID int64) {
	b.msgIDLock.Lock()
	msgID := b.lastMessageID[chatID]
	b.msgIDLock.Unlock()

	if msgID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, msgID)
		b.botAPI.Request(deleteMsg)
	}
}

func (b *CarWashBot) showTimeSlots(chatID int64, dateStr string) {
	var rows [][]tgbotapi.InlineKeyboardButton
	for hour := 8; hour <= 20; hour++ {
		timeStr := fmt.Sprintf("%02d:00", hour)
		available := b.schedule.IsTimeAvailable(dateStr, timeStr)

		btnText := fmt.Sprintf("üïí %s", timeStr)
		if !available {
			btnText = "üî¥ " + timeStr + " (–ó–∞–Ω—è—Ç–æ)"
		} else {
			btnText = "üîµ " + timeStr + " (–°–≤–æ–±–æ–¥–Ω–æ)"
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "time_"+timeStr),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	date, _ := time.Parse("02.01.2006", dateStr)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ %s:", date.Format("Monday, 02.01")))
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) showDaySelection(chatID int64) {
	now := time.Now()
	var buttons [][]tgbotapi.InlineKeyboardButton

	for i := 0; i < 7; i++ {
		date := now.AddDate(0, 0, i)
		dateStr := date.Format("02.01.2006")

		btnText := fmt.Sprintf("üìÖ %s", date.Format("Mon 02.01"))
		if i == 0 {
			btnText = "üîµ –°–µ–≥–æ–¥–Ω—è " + date.Format("02.01")
		} else if i == 1 {
			btnText = "üîµ –ó–∞–≤—Ç—Ä–∞ " + date.Format("02.01")
		}

		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "day_"+dateStr),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleDaySelection(chatID, userID int64, dateStr string) {
	selectedDate, err := time.Parse("02.01.2006", dateStr)
	if err != nil || selectedDate.Before(time.Now().Truncate(24*time.Hour)) {
		b.sendMessage(chatID, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")
		b.showDaySelection(chatID)
		return
	}

	b.userStates[userID] = models.UserState{
		AwaitingTime: true,
		SelectedDate: dateStr,
	}

	b.showTimeSlots(chatID, dateStr)
}
func (b *CarWashBot) showUserBookings(chatID, userID int64) {
	bookings := b.schedule.GetUserBookings(userID)

	if len(bookings) == 0 {
		b.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	var sb strings.Builder
	sb.WriteString("üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n")

	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, booking := range bookings {
		sb.WriteString(fmt.Sprintf(
			"üìÖ %s\nüïí %s\nüöó %s %s\n\n",
			booking.Date,
			booking.Time,
			booking.CarModel,
			booking.CarNumber,
		))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
		btnData := fmt.Sprintf("cancel_%s_%s", booking.Date, booking.Time)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å", btnData),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}
func (b *CarWashBot) handleCancelCommand(chatID, userID int64) {
	userBookings := b.schedule.GetUserBookings(userID)
	if len(userBookings) == 0 {
		b.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, booking := range userBookings {
		btnText := fmt.Sprintf("%s %s - %s %s",
			booking.Date, booking.Time, booking.CarModel, booking.CarNumber)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "cancel_"+booking.ID),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleBookingCancellation(chatID, userID int64, bookingID string) {
	success, booking := b.schedule.CancelBooking(bookingID, userID)
	if !success {
		b.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.")
		return
	}

	msg := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:\n%s %s - %s %s",
		booking.Date, booking.Time, booking.CarModel, booking.CarNumber)
	b.sendMessage(chatID, msg)
}
