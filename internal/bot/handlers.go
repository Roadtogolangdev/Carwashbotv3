package bot

import (
	_ "carwash-bot/config"
	"carwash-bot/internal/models"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"sort"
	"strings"
	"time"
)

func (b *CarWashBot) handleMessage(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	userID := msg.From.ID
	text := msg.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ)
	if state, exists := b.userStates[userID]; exists {
		if state.AwaitingCarInfo {
			b.handleCarInfoInput(chatID, userID, text)
			return
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch {
	case text == "/start" || text == "/menu" || text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		b.sendWelcomeMessage(chatID)

	case text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" || text == "/book":
		b.showDaySelection(chatID)

	case text == "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" || text == "/schedule":
		b.showSchedule(chatID)

	case text == "‚ùå –ú–æ–∏ –∑–∞–ø–∏—Å–∏" || text == "/mybookings":
		b.showUserBookings(msg.Chat.ID, msg.From.ID)

	case text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" || text == "/cancel":
		b.handleCancelCommand(chatID, userID)

	default:
		b.sendMessage(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
	}
}

func (b *CarWashBot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	data := query.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è")
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := b.botAPI.Request(callback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}

	switch {
	case strings.HasPrefix(data, "day_"):
		dateStr := strings.TrimPrefix(data, "day_")
		b.handleDaySelection(chatID, userID, dateStr)

	case strings.HasPrefix(data, "time_"):
		timeStr := strings.TrimPrefix(data, "time_")
		b.handleTimeSelection(chatID, userID, timeStr)

	case data == "main_menu":
		b.sendWelcomeMessage(chatID)

	case strings.HasPrefix(data, "cancel_"):
		bookingID := strings.TrimPrefix(data, "cancel_")
		b.handleBookingCancellation(chatID, userID, bookingID)

	case data == "back_to_dates":
		b.showDaySelection(chatID)

	case strings.HasPrefix(data, "admin_cancel:"):
		if !b.isAdmin(query.From.ID) {
			b.answerCallback(query.ID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏", true)
			return
		}
		bookingID := strings.TrimPrefix(data, "admin_cancel:")
		err := b.storage.DeleteBooking(bookingID)
		if err != nil {
			b.answerCallback(query.ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", true)
			return
		}
		b.answerCallback(query.ID, "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", false)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
		editMsg := tgbotapi.NewEditMessageText(
			b.config.ChannelID,
			query.Message.MessageID,
			fmt.Sprintf("‚ùå –û–¢–ú–ï–ù–ï–ù–û –ê–î–ú–ò–ù–û–ú\n%s", query.Message.Text),
		)
		editMsg.ParseMode = "HTML"
		b.botAPI.Send(editMsg)
	default:
		b.answerCallback(query.ID, "", false) // –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "—á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è"
	}

}
func (b *CarWashBot) sendWelcomeMessage(chatID int64) {

	msgText := `üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–æ–π–∫–∏!* üßº

    
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
		),
	)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleTimeSelection(chatID, userID int64, timeStr string) {
	state := b.userStates[userID]
	now := time.Now()
	today := now.Format("02.01.2006")
	if state.SelectedDate == today {
		selectedTime, err := time.Parse("15:04", timeStr)
		if err == nil {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å (—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
			currentTime := now.Add(time.Hour)
			selectedDateTime := time.Date(
				now.Year(), now.Month(), now.Day(),
				selectedTime.Hour(), selectedTime.Minute(), 0, 0, now.Location())

			if selectedDateTime.Before(currentTime) {
				b.sendMessage(chatID, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è")
				b.showTimeSlots(chatID, state.SelectedDate)
				return
			}
		}
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
	available, err := b.storage.IsTimeAvailable(state.SelectedDate, timeStr)
	if err != nil || !available {
		b.sendMessage(chatID, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
		b.showTimeSlots(chatID, state.SelectedDate)
		return
	}

	b.userStates[userID] = models.UserState{
		AwaitingCarInfo: true,
		SelectedDate:    state.SelectedDate,
		SelectedTime:    timeStr,
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –õ–∞–¥–∞ 123")
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleCarInfoInput(chatID, userID int64, text string) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteLastMessage(chatID)

	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
	parts := strings.SplitN(text, " ", 2)
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(chatID, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏ –º–∞—Ä–∫—É, –∏ –Ω–æ–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: –ì–∞–∑–µ–ª—å 123")
		b.sendMessageWithSave(chatID, msg)
		return
	}

	carModel := parts[0]
	carNumber := parts[1]
	state := b.userStates[userID]

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	err := b.storage.AddBooking(models.Booking{
		ID:        fmt.Sprintf("%d-%s-%s", userID, state.SelectedDate, state.SelectedTime),
		Date:      state.SelectedDate,
		Time:      state.SelectedTime,
		CarModel:  carModel,
		CarNumber: carNumber,
		UserID:    userID,
		Created:   time.Now(),
	})
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
		return
	}

	if b.config.ChannelID != 0 {
		booking, err := b.storage.GetBookingByID(fmt.Sprintf("%d-%s-%s", userID, state.SelectedDate, state.SelectedTime))
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)
		} else if booking != nil {
			if err := b.notifyChannel(*booking); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: %v", err)
				b.sendMessage(b.adminID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: %v", err))
			}
		}
	}
	delete(b.userStates, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	confirmMsg := fmt.Sprintf(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–æ–π–∫—É!

	üìÖ –î–∞—Ç–∞: %s
	üïí –í—Ä–µ–º—è: %s
	üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: %s %s
	
	–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π —É—Å–ª—É–≥–∏!`,
		state.SelectedDate, state.SelectedTime, carModel, carNumber)

	msg := tgbotapi.NewMessage(chatID, confirmMsg)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	b.sendMessageWithSave(chatID, msg)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
	b.notifyAdminAboutNewBooking(state.SelectedTime, carModel, carNumber)
}
func (b *CarWashBot) showSchedule(chatID int64) {
	// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤
	weekdayNames := map[time.Weekday]string{
		time.Monday:    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		time.Tuesday:   "–í—Ç–æ—Ä–Ω–∏–∫",
		time.Wednesday: "–°—Ä–µ–¥–∞",
		time.Thursday:  "–ß–µ—Ç–≤–µ—Ä–≥",
		time.Friday:    "–ü—è—Ç–Ω–∏—Ü–∞",
		time.Saturday:  "–°—É–±–±–æ—Ç–∞",
		time.Sunday:    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	}

	monthNames := map[time.Month]string{
		time.January:   "–Ø–Ω–≤–∞—Ä—è",
		time.February:  "–§–µ–≤—Ä–∞–ª—è",
		time.March:     "–ú–∞—Ä—Ç–∞",
		time.April:     "–ê–ø—Ä–µ–ª—è",
		time.May:       "–ú–∞—è",
		time.June:      "–ò—é–Ω—è",
		time.July:      "–ò—é–ª—è",
		time.August:    "–ê–≤–≥—É—Å—Ç–∞",
		time.September: "–°–µ–Ω—Ç—è–±—Ä—è",
		time.October:   "–û–∫—Ç—è–±—Ä—è",
		time.November:  "–ù–æ—è–±—Ä—è",
		time.December:  "–î–µ–∫–∞–±—Ä—è",
	}

	allBookings, err := b.storage.GetAllBookings()
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
		return
	}
	bookingsByDate := make(map[string][]models.Booking)
	for _, booking := range allBookings {
		bookingsByDate[booking.Date] = append(bookingsByDate[booking.Date], booking)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
	var dates []time.Time
	for dateStr := range bookingsByDate {
		date, _ := time.Parse("02.01.2006", dateStr)
		dates = append(dates, date)
	}
	sort.Slice(dates, func(i, j int) bool {
		return dates[i].Before(dates[j])
	})

	var sb strings.Builder
	sb.WriteString("üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–∫*\n\n")

	now := time.Now()
	today := now.Format("02.01.2006")
	tomorrow := now.AddDate(0, 0, 1).Format("02.01.2006")

	for _, date := range dates {
		dateStr := date.Format("02.01.2006")
		dayName := weekdayNames[date.Weekday()]
		monthName := monthNames[date.Month()]

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		switch dateStr {
		case today:
			sb.WriteString(fmt.Sprintf("=== –°–µ–≥–æ–¥–Ω—è, %d %s ===\n", date.Day(), monthName))
		case tomorrow:
			sb.WriteString(fmt.Sprintf("=== –ó–∞–≤—Ç—Ä–∞, %d %s ===\n", date.Day(), monthName))
		default:
			sb.WriteString(fmt.Sprintf("=== %s, %d %s ===\n", dayName, date.Day(), monthName))
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
		bookings := bookingsByDate[dateStr]
		sort.Slice(bookings, func(i, j int) bool {
			return bookings[i].Time < bookings[j].Time
		})

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
		for _, booking := range bookings {
			sb.WriteString(fmt.Sprintf("üïí %s - %s %s\n",
				booking.Time,
				booking.CarModel,
				booking.CarNumber))
		}
		sb.WriteString("\n")
	}

	if len(dates) == 0 {
		sb.WriteString("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n")
	}

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) notifyAdminAboutNewBooking(timeStr, carModel, carNumber string) {
	msgText := fmt.Sprintf(`üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:
–í—Ä–µ–º—è: %s
–ê–≤—Ç–æ: %s %s`, timeStr, carModel, carNumber)

	msg := tgbotapi.NewMessage(b.adminID, msgText)
	b.botAPI.Send(msg)
}

func (b *CarWashBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.botAPI.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *CarWashBot) sendMessageWithSave(chatID int64, msg tgbotapi.MessageConfig) {
	sentMsg, err := b.botAPI.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	b.msgIDLock.Lock()
	b.lastMessageID[chatID] = sentMsg.MessageID
	b.msgIDLock.Unlock()
}

func (b *CarWashBot) deleteLastMessage(chatID int64) {
	b.msgIDLock.Lock()
	msgID := b.lastMessageID[chatID]
	b.msgIDLock.Unlock()

	if msgID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, msgID)
		b.botAPI.Request(deleteMsg)
	}
}
func (b *CarWashBot) showTimeSlots(chatID int64, dateStr string) {
	now := time.Now()
	todayStr := now.Format("02.01.2006")

	date, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã")
		return
	}

	weekdayNames := [...]string{
		"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫",
		"–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞",
	}

	header := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ %s, %s:",
		weekdayNames[date.Weekday()],
		date.Format("02.01.2006"))

	var rows [][]tgbotapi.InlineKeyboardButton

	for hour := b.storage.StartTime; hour <= b.storage.EndTime; hour++ {
		timeStr := fmt.Sprintf("%02d:00", hour)
		available, err := b.storage.IsTimeAvailable(dateStr, timeStr)
		if err != nil {
			available = false
		}

		// –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
		if dateStr == todayStr && hour <= now.Hour() {
			available = false
		}

		btnText := fmt.Sprintf("üïí %s", timeStr)
		if !available {
			btnText = "üî¥ " + timeStr + " (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
		} else {
			btnText = "üü¢ " + timeStr + " (–°–≤–æ–±–æ–¥–Ω–æ)"
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "time_"+timeStr),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "back_to_dates"),
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, header)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.sendMessageWithSave(chatID, msg)
}
func (b *CarWashBot) showDaySelection(chatID int64) {
	now := time.Now()
	var buttons [][]tgbotapi.InlineKeyboardButton

	weekdayNames := []string{
		"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫",
		"–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞",
	}

	for i := 0; i < 7; i++ {
		date := now.AddDate(0, 0, i)
		dateStr := date.Format("02.01.2006")
		weekday := weekdayNames[date.Weekday()]

		dayDesc := ""
		switch i {
		case 0:
			dayDesc = "–°–µ–≥–æ–¥–Ω—è"
		case 1:
			dayDesc = "–ó–∞–≤—Ç—Ä–∞"
		default:
			dayDesc = weekday
		}

		btnText := fmt.Sprintf("üìÖ %s (%s)", dayDesc, date.Format("02.01"))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "day_"+dateStr),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}
func (b *CarWashBot) handleDaySelection(chatID, userID int64, dateStr string) {
	now := time.Now()
	todayStr := now.Format("02.01.2006")

	// –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
	selectedDate, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã")
		b.showDaySelection(chatID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º parsedDate)
	if selectedDate.Before(now.Truncate(24 * time.Hour)) {
		b.sendMessage(chatID, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")
		b.showDaySelection(chatID)
		return
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
	if dateStr == todayStr {
		currentHour := now.Hour()
		if currentHour >= b.storage.EndTime {
			b.sendMessage(chatID, "‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
			b.showDaySelection(chatID)
			return
		}
	}

	b.userStates[userID] = models.UserState{
		AwaitingTime: true,
		SelectedDate: dateStr,
	}

	b.showTimeSlots(chatID, dateStr)
}
func (b *CarWashBot) showUserBookings(chatID, userID int64) {
	bookings, err := b.storage.GetUserBookings(userID)
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
		return
	}

	if len(bookings) == 0 {
		b.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	var sb strings.Builder
	sb.WriteString("üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n")

	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, booking := range bookings {
		sb.WriteString(fmt.Sprintf(
			"üìÖ %s\nüïí %s\nüöó %s %s\n\n",
			booking.Date,
			booking.Time,
			booking.CarModel,
			booking.CarNumber,
		))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
		btnData := fmt.Sprintf("cancel_%s_%s", booking.Date, booking.Time)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å", btnData),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}
func (b *CarWashBot) handleCancelCommand(chatID, userID int64) {
	userBookings, _ := b.storage.GetUserBookings(userID)
	if len(userBookings) == 0 {
		b.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, booking := range userBookings {
		btnText := fmt.Sprintf("%s %s - %s %s",
			booking.Date, booking.Time, booking.CarModel, booking.CarNumber)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, "cancel_"+booking.ID),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	))

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.sendMessageWithSave(chatID, msg)
}

func (b *CarWashBot) handleBookingCancellation(chatID, userID int64, bookingID string) {
	booking, err := b.storage.GetBookingByID(bookingID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")
		return
	}

	if booking == nil {
		b.sendMessage(chatID, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	err = b.storage.DeleteBooking(bookingID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
		return
	}

	msg := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:\nüìÖ %s\nüïí %s\nüöó %s %s",
		booking.Date,
		booking.Time,
		booking.CarModel,
		booking.CarNumber)
	b.sendMessage(chatID, msg)

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if userID != b.adminID {
		adminMsg := fmt.Sprintf("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\n%s %s - %s %s",
			booking.Date, booking.Time, booking.CarModel, booking.CarNumber)
		b.sendMessage(b.adminID, adminMsg)
	}
}
func (b *CarWashBot) notifyChannelWithButtons(booking models.Booking) {
	msgText := fmt.Sprintf(`üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:
üóì %s –≤ %s
üöò %s %s`,
		booking.Date, booking.Time,
		booking.CarModel, booking.CarNumber)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
				fmt.Sprintf("admin_cancel_%s", booking.ID)),
		),
	)

	msg := tgbotapi.NewMessageToChannel("–≤–∞—à_–∫–∞–Ω–∞–ª", msgText)
	msg.ReplyMarkup = btn
	b.botAPI.Send(msg)
}
